// <auto-generated />
using System;
using ITechArt.Surveys.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ITechArt.Surveys.Repositories.Migrations
{
    [DbContext(typeof(SurveysDbContext))]
    partial class SurveysDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MultipleChoiceResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceResponseId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("NumberInSection")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.FileResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("FileResponses");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.MultipleChoiceResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("MultipleChoiceResponses");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.NumericResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("NumericResponses");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.Response", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RespondentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SurveyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.SingleChoiceResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("SingleChoiceResponses");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.TextResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("TextResponses");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "76e401a9-1e91-4dff-adb7-c455cefe6fa9",
                            ConcurrencyStamp = "4179d8bd-907e-4293-bf2b-5a4598e34551",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "b03bd4cc-93a8-4623-ab9d-606823a1547e",
                            ConcurrencyStamp = "a00343f0-cc82-452e-b00b-663216eadce8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NumberInSurvey")
                        .HasColumnType("int");

                    b.Property<string>("SurveyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Survey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[NormalizedEmail] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "4beb0654-3b7a-4601-8b81-b284cc25a903",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01fbbd27-bd79-4f36-a892-384df2a5cea6",
                            Email = "egorfedorenko.w@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EGORFEDORENKO.W@GMAIL.COM",
                            NormalizedUserName = "EGORFEDORENKO",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxts21ZFCTO9PJMekWmZIcRpZFtuqrjSI4xwd76L0h5zF3WoQlhE015Xr+kBSDqsw==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2021, 9, 14, 13, 2, 32, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "9dd2b025-477a-4ab2-af59-dfe6f16ea4e7",
                            TwoFactorEnabled = false,
                            UserName = "EgorFedorenko"
                        });
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "4beb0654-3b7a-4601-8b81-b284cc25a903",
                            RoleId = "b03bd4cc-93a8-4623-ab9d-606823a1547e"
                        },
                        new
                        {
                            UserId = "4beb0654-3b7a-4601-8b81-b284cc25a903",
                            RoleId = "76e401a9-1e91-4dff-adb7-c455cefe6fa9"
                        });
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Option", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Responses.MultipleChoiceResponse", null)
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceResponseId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Question", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.FileResponse", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Responses.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.MultipleChoiceResponse", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Responses.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.NumericResponse", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Responses.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.Response", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.User", "Respondent")
                        .WithMany("Responses")
                        .HasForeignKey("RespondentId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Survey", "Survey")
                        .WithMany("Responses")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Respondent");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.SingleChoiceResponse", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Option", "Option")
                        .WithMany()
                        .HasForeignKey("ChoiceId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Responses.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.TextResponse", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("ITechArt.Surveys.DomainModel.Responses.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Section", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Survey", "Survey")
                        .WithMany("Sections")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Survey", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.User", "Owner")
                        .WithMany("Surveys")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.UserRole", b =>
                {
                    b.HasOne("ITechArt.Surveys.DomainModel.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITechArt.Surveys.DomainModel.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Responses.MultipleChoiceResponse", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.Survey", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ITechArt.Surveys.DomainModel.User", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("Surveys");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
