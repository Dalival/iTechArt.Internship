@using Microsoft.AspNetCore.Http

@inject IHttpContextAccessor _contextAccessor

@model UserTableViewModel

@{
    ViewData["Title"] = "Users";
}

<link rel="stylesheet" href="~/css/userTable.css"/>

<h1>@ViewData["Title"]</h1>

<div class="user-table">
    <div class="table-header align-left">
        <a href="/User/UserTable?page=@Model.Page&sortOrder=@ViewBag.SortByClickOnName">
            <strong>Name</strong>
        </a>
    </div>
    <div class="table-header">
        <a href="/User/UserTable?page=@Model.Page&sortOrder=@ViewBag.SortByClickOnRole">
            <strong>Role</strong>
        </a>
    </div>
    <div class="table-header">
        <a href="/User/UserTable?page=@Model.Page&sortOrder=@ViewBag.SortByClickOnDate">
            <strong>Registrated</strong>
        </a>
    </div>
    <div class="table-header">
        <a>
            <strong>Actions</strong>
        </a>
    </div>
    @{
        var currentUserName = _contextAccessor.HttpContext?.User.Identity?.Name;
        foreach (var user in Model.Users)
        {
            <div class="align-left">@user.Name</div>
            var roles = user.Roles.Any(r => r.Name != "User")
                ? string.Join(", ", user.Roles.Select(r => r.Name).Where(r => r != "User"))
                : "User";
            <div>@roles</div>
            <div>@user.RegistrationDate.Date.ToShortDateString()</div>
            if (user.Name == currentUserName)
            {
                <div class="inactive-actions">
                    <span class="material-icons-outlined">delete</span><span class="material-icons-outlined">person_outline</span>
                </div>
            }
            else
            {
                <div class="actions">
                    <span>
                        @using (Html.BeginForm("DeleteUser", "User", FormMethod.Post))
                        {
                            @Html.Hidden("userId", user.Id)
                            @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort)
                            <label class="delete-button" title="Delete user">
                                <input type="submit" class="hide"/>
                                <span class="material-icons-outlined">delete</span>
                            </label>
                        }
                    </span>
                    <span>
                        @if (user.Roles.Any(r => r.Name == "Admin"))
                        {
                            @using (Html.BeginForm("RevokeAdminRights", "User", FormMethod.Post))
                            {
                                @Html.Hidden("userId", user.Id)
                                @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort)
                                <label class="change-role-button" title="Revoke admin rights">
                                    <input type="submit" class="hide"/>
                                    <span class="material-icons-outlined">person_outline</span>
                                </label>
                            }
                        }
                        else
                        {
                            @using (Html.BeginForm("GiveAdminRights", "User", FormMethod.Post))
                            {
                                @Html.Hidden("userId", user.Id)
                                @Html.Hidden("sortOrder", (object)ViewBag.CurrentSort)
                                <label class="change-role-button" title="Give admin rights">
                                    <input type="submit" class="hide"/>
                                    <span class="material-icons-outlined">manage_accounts</span>
                                </label>
                            }
                        }
                    </span>
                </div>
            }
        }
    }
</div>

<div class="navbar-for-table">
    <div class="users-counter">
        Total users: @Model.TotalUsersAmount
    </div>
    <div class="flip-pages-arrows">
        @{
            const int usersPerPage = 5;

            if (Model.Page != 1)
            {
                <a href="/User/UserTable?page=1">
                    <span class="material-icons-outlined">keyboard_double_arrow_left</span>
                </a>
                <a href="/User/UserTable?page=@(Model.Page - 1)">
                    <span class="material-icons-outlined">keyboard_arrow_left</span>
                </a>
            }

            if (Model.TotalUsersAmount > usersPerPage)
            {
                <span class="users-counter">@Model.Page</span>
            }

            var fullPagesNumber = Model.TotalUsersAmount / usersPerPage;
            var isExtraPageNeeded = Model.TotalUsersAmount > fullPagesNumber * usersPerPage;
            var lastPageIndex = isExtraPageNeeded
                ? fullPagesNumber + 1
                : fullPagesNumber;
            if (Model.Page != lastPageIndex)
            {
                <a href="/User/UserTable?page=@(Model.Page + 1)">
                    <span class="material-icons-outlined">keyboard_arrow_right</span>
                </a>
                <a href="/User/UserTable?page=@(Model.TotalUsersAmount / usersPerPage + 1)">
                    <span class="material-icons-outlined">keyboard_double_arrow_right</span>
                </a>
            }
        }
    </div>
</div>
